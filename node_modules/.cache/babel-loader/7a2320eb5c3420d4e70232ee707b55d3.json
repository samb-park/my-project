{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetchData = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(true);\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setIsLoading(true);\n        const response = await fetch(url);\n        const data = await response.json();\n        setData(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getData();\n  }, [url]);\n  return {\n    data,\n    isLoading,\n    error\n  };\n};\n\n_s(useFetchData, \"1AwhliglQQuqi+J/6MTF1LuIRxI=\");\n\nexport default useFetchData;","map":{"version":3,"sources":["/Users/sangbongpark/Documents/GitHub/TakeHome/birdandbe/src/hook/useFetchData.js"],"names":["useState","useEffect","useFetchData","url","data","setData","isLoading","setIsLoading","error","setError","getData","response","fetch","json"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,YAAY,GAAIC,GAAD,IAAS;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,OAAO,GAAG,YAAY;AACxB,UAAI;AACAH,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,cAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;AACA,cAAMC,IAAI,GAAG,MAAMO,QAAQ,CAACE,IAAT,EAAnB;AACAR,QAAAA,OAAO,CAACD,IAAD,CAAP;AACH,OALD,CAKE,OAAOI,KAAP,EAAc;AACZC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,OAPD,SAOU;AACND,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,KAXD;;AAYAG,IAAAA,OAAO;AACV,GAdQ,EAcN,CAACP,GAAD,CAdM,CAAT;AAgBA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAtBD;;GAAMN,Y;;AAwBN,eAAeA,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetchData = (url) => {\r\n    const [data, setData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                const response = await fetch(url);\r\n                const data = await response.json();\r\n                setData(data);\r\n            } catch (error) {\r\n                setError(error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        getData();\r\n    }, [url]);\r\n\r\n    return { data, isLoading, error };\r\n};\r\n\r\nexport default useFetchData;\r\n"]},"metadata":{},"sourceType":"module"}